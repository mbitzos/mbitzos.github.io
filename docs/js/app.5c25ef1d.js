(function(e){function t(t){for(var a,o,s=t[0],l=t[1],c=t[2],h=0,d=[];h<s.length;h++)o=s[h],Object.prototype.hasOwnProperty.call(r,o)&&r[o]&&d.push(r[o][0]),r[o]=0;for(a in l)Object.prototype.hasOwnProperty.call(l,a)&&(e[a]=l[a]);u&&u(t);while(d.length)d.shift()();return i.push.apply(i,c||[]),n()}function n(){for(var e,t=0;t<i.length;t++){for(var n=i[t],a=!0,s=1;s<n.length;s++){var l=n[s];0!==r[l]&&(a=!1)}a&&(i.splice(t--,1),e=o(o.s=n[0]))}return e}var a={},r={app:0},i=[];function o(t){if(a[t])return a[t].exports;var n=a[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=e,o.c=a,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)o.d(n,a,function(t){return e[t]}.bind(null,a));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="/";var s=window["webpackJsonp"]=window["webpackJsonp"]||[],l=s.push.bind(s);s.push=t,s=s.slice();for(var c=0;c<s.length;c++)t(s[c]);var u=l;i.push([0,"chunk-vendors"]),n()})({0:function(e,t,n){e.exports=n("cd49")},"0a4d":function(e,t,n){e.exports=n.p+"img/unity-logo.80de313e.png"},"0cfc":function(e,t,n){e.exports=n.p+"img/cover.f0d5e85d.png"},1771:function(e,t,n){var a={"./about/digital_face.png":"683f","./about/face1.jpg":"96fb","./about/favicon-image.png":"a5b1","./about/java-logo.svg":"7106","./about/mongodb.jpg":"be36","./about/os-logo.png":"6867","./about/python.png":"4f3a","./about/unity-logo.png":"0a4d","./about/vue-logo.png":"b3ff","./about/vue-logo.svg":"7cce","./fonts/AkagiPro-Black.ttf":"d0122","./fonts/AkagiPro-Light.ttf":"421b","./main.scss":"b383","./posts/fsm-player-controllers/cover.jpg":"ef7d","./posts/fsm-player-controllers/fsm-locked-door.jpg":"e06c","./posts/fsm-player-controllers/fsm-quest.jpg":"d6a1","./posts/programmatic-animation-using-coroutines/ambient-lighting-animations.gif":"ac6c","./posts/programmatic-animation-using-coroutines/animation-curve-editor.jpg":"33c1","./posts/programmatic-animation-using-coroutines/animation-curves.gif":"fc91","./posts/programmatic-animation-using-coroutines/attack-dash-animations.gif":"9f0b","./posts/programmatic-animation-using-coroutines/card-deck-animation.gif":"40cc","./posts/programmatic-animation-using-coroutines/color-lerp-example.gif":"77b3","./posts/programmatic-animation-using-coroutines/cover.png":"0cfc"};function r(e){var t=i(e);return n(t)}function i(e){if(!n.o(a,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return a[e]}r.keys=function(){return Object.keys(a)},r.resolve=i,e.exports=r,r.id="1771"},"29b8":function(e,t,n){},"33c1":function(e,t,n){e.exports=n.p+"img/animation-curve-editor.a99888a7.jpg"},3419:function(e,t,n){"use strict";n("dc6b")},"40cc":function(e,t,n){e.exports=n.p+"img/card-deck-animation.5a9ceaf8.gif"},"421b":function(e,t,n){e.exports=n.p+"fonts/AkagiPro-Light.d9114d22.ttf"},"4dbd":function(e,t,n){"use strict";n("e3b1")},"4f3a":function(e,t,n){e.exports=n.p+"img/python.05d8e48a.png"},"5b33":function(e,t,n){},"683f":function(e,t,n){e.exports=n.p+"img/digital_face.756e905f.png"},6867:function(e,t,n){e.exports=n.p+"img/os-logo.296364b9.png"},7106:function(e,t,n){e.exports=n.p+"img/java-logo.84321945.svg"},"77b3":function(e,t,n){e.exports=n.p+"img/color-lerp-example.6dfaed18.gif"},"7c5f":function(e,t,n){"use strict";n("f22a")},"7cce":function(e,t,n){e.exports=n.p+"img/vue-logo.6fb1734b.svg"},"8ae2":function(e,t,n){},"96fb":function(e,t,n){e.exports=n.p+"img/face1.b52cfc22.jpg"},"9f0b":function(e,t,n){e.exports=n.p+"img/attack-dash-animations.b0305274.gif"},a5b1:function(e,t,n){e.exports=n.p+"img/favicon-image.b3ab9557.png"},a851:function(e,t,n){"use strict";n("aee2")},ac6c:function(e,t,n){e.exports=n.p+"img/ambient-lighting-animations.68e7cdfc.gif"},aee2:function(e,t,n){},b383:function(e,t,n){},b3ff:function(e,t,n){e.exports=n.p+"img/vue-logo.96e5850d.png"},b8ff:function(e,t,n){"use strict";n("29b8")},be36:function(e,t,n){e.exports=n.p+"img/mongodb.9b024a60.jpg"},cd49:function(e,t,n){"use strict";n.r(t);n("e260"),n("e6cf"),n("cca6"),n("a79d"),n("cd17");var a=n("7a23");function r(e,t,n,r,i,o){var s=Object(a["z"])("router-view");return Object(a["r"])(),Object(a["d"])(s)}var i=Object(a["i"])({methods:{hello:function(){console.log("hello and welcome to my website."),console.log("currently working on building my gamedev blog, check it out: michaelbitzos.com/devblog"),console.log("This was made with Vue3 and TS. I don't know why I did this but here we are.")}},created:function(){this.hello()}});n("3419");i.render=r;var o=i,s=(n("d81d"),n("6c02")),l=n("96fb"),c=n.n(l),u=n("4f3a"),h=n.n(u),d=n("be36"),m=n.n(d),p=n("b3ff"),f=n.n(p),b=n("7106"),g=n.n(b),y=n("0a4d"),v=n.n(y),O=n("6867"),j=n.n(O),w=Object(a["G"])("data-v-588d6188");Object(a["u"])("data-v-588d6188");var S={class:"content col"},k=Object(a["h"])("div",{id:"header",class:"row"},[Object(a["h"])("div",{id:"header-text",class:"col"},[Object(a["h"])("div",{class:"hey"},"hey,"),Object(a["h"])("div",{class:"name"},"i'm michael bitzos.")]),Object(a["h"])("div",{class:"headshot-container"},[Object(a["h"])("img",{src:c.a})])],-1),x=Object(a["h"])("hr",{id:"hr-1",class:"gradient-line left"},null,-1),F=Object(a["h"])("div",{id:"software-developer",class:"row"},[Object(a["h"])("div",{class:"icon-container row"},[Object(a["h"])("div",{id:"python"},[Object(a["h"])("img",{src:h.a})]),Object(a["h"])("div",{id:"mongo"},[Object(a["h"])("img",{src:m.a})]),Object(a["h"])("div",{id:"vue",class:"small"},[Object(a["h"])("img",{src:f.a})]),Object(a["h"])("div",{id:"java",class:"small"},[Object(a["h"])("img",{src:g.a})])]),Object(a["h"])("div",null,[Object(a["h"])("div",{class:"text-block-header header"}," i'm a software developer professionally. "),Object(a["h"])("div",{class:"text-block"},[Object(a["h"])("div",null,"i currently work with python & mongodb."),Object(a["h"])("div",null,"i used to do a lot of vue.js & java."),Object(a["h"])("div",null,[Object(a["g"])(" here's my "),Object(a["h"])("a",{href:"./Michael-Bitzos-Resume.pdf",target:"_blank"},"resume")]),Object(a["h"])("div",null,[Object(a["g"])(" here's my "),Object(a["h"])("a",{href:"https://github.com/mbitzos",target:"_black"},"github")])])])],-1),C=Object(a["h"])("hr",{id:"hr-2",class:"gradient-line right"},null,-1),M={id:"game-developer",class:"row"},I=Object(a["h"])("div",{class:"text-block-header header"}," i'm a game developer on the side. ",-1),T={class:"text-block"},E=Object(a["g"])(" i'm writing blogs about my experience "),P=Object(a["g"])("here."),A=Object(a["h"])("div",null,[Object(a["g"])(" been makin' things in unity 2"),Object(a["h"])("span",{style:{"text-transform":"initial"}},"D"),Object(a["g"])(" for a while. ")],-1),U=Object(a["h"])("div",{class:"icon-container row"},[Object(a["h"])("div",{id:"unity"},[Object(a["h"])("img",{src:v.a})]),Object(a["h"])("div",{id:"overlook"},[Object(a["h"])("img",{src:j.a})])],-1),D=Object(a["h"])("hr",{id:"hr-3"},null,-1),z=Object(a["h"])("div",{id:"contact"},[Object(a["h"])("div",{class:"header"},"contact me"),Object(a["h"])("div",{class:"row"},[Object(a["h"])("div",{class:"contacts"},[Object(a["h"])("a",{href:"mailto:mbitzos@gmail.com"},"email"),Object(a["h"])("a",{href:"https://www.linkedin.com/in/michaelbitzos/",target:"_blank"},"linkedin")])])],-1);Object(a["s"])();var L=w((function(e,t,n,r,i,o){var s=Object(a["z"])("router-link");return Object(a["r"])(),Object(a["d"])("div",S,[k,x,F,C,Object(a["h"])("div",M,[Object(a["h"])("div",null,[I,Object(a["h"])("div",T,[Object(a["h"])("div",null,[E,Object(a["h"])(s,{to:"devblog"},{default:w((function(){return[P]})),_:1})]),A])]),U]),D,z])})),W=Object(a["i"])({});n("fc94");W.render=L,W.__scopeId="data-v-588d6188";var _=W,B=n("683f"),q=n.n(B),H={id:"devblog"},G={id:"navbar"},R={class:"title-container"},N=Object(a["h"])("div",{class:"title"},[Object(a["g"])("michael bitzos "),Object(a["h"])("span",null,"[devblog]")],-1),V={class:"subtitle is-5"},K=Object(a["g"])(" writin' about gamedev. "),J={class:"rss",title:"Subscribe to RSS feed"},Y={href:"/rss/feed.xml",target:"_blank"},$=Object(a["h"])("div",{id:"navbar-border"},null,-1),Z=Object(a["h"])("div",{id:"navbar-border",class:"second"},null,-1),X={id:"main-content"},Q=Object(a["h"])("div",{id:"sidebar-border"},null,-1),ee=Object(a["h"])("div",{id:"sidebar-dot"},null,-1),te={id:"post-container"};function ne(e,t,n,r,i,o){var s=Object(a["z"])("router-link"),l=Object(a["z"])("FontAwesomeIcon"),c=Object(a["z"])("sidebar"),u=Object(a["z"])("router-view");return Object(a["r"])(),Object(a["d"])("div",H,[Object(a["h"])("div",G,[Object(a["h"])(s,{to:"/",custom:""},{default:Object(a["F"])((function(e){var t=e.navigate;return[Object(a["h"])("img",{onClick:t,title:"Art by Adam Mawby!",class:"face",src:q.a,role:"link"},null,8,["onClick"])]})),_:1}),Object(a["h"])("div",R,[N,Object(a["h"])("div",V,[K,Object(a["h"])("span",J,[Object(a["h"])("a",Y,[Object(a["h"])(l,{icon:"fa-solid fa-rss",class:"rss-btn"})])])])])]),$,Z,Object(a["h"])("div",X,[Object(a["h"])("div",{id:"sidebar-expander",class:{open:e.open}},[Object(a["g"])(Object(a["C"])(e.open?"‹":"›")+" ",1),Object(a["h"])("div",{onClick:t[1]||(t[1]=function(){return e.toggleOpen&&e.toggleOpen.apply(e,arguments)})})],2),Object(a["h"])("div",{id:"sidebar-container",class:{open:e.open}},[Object(a["h"])(c)],2),Object(a["h"])("div",{id:"blackout",onClick:t[2]||(t[2]=function(t){return e.open=!1}),class:{show:e.open}},null,2),Q,ee,Object(a["h"])("div",te,[Object(a["h"])(u,{key:e.$route.fullPath})])])])}var ae={id:"sidebar"},re=Object(a["h"])("div",{class:"title is-6"}," Articles ",-1),ie={class:"articles"},oe={key:0};function se(e,t,n,r,i,o){var s=Object(a["z"])("router-link");return Object(a["r"])(),Object(a["d"])("div",ae,[re,Object(a["h"])("ul",ie,[(Object(a["r"])(!0),Object(a["d"])(a["a"],null,Object(a["x"])(e.articles,(function(t){return Object(a["r"])(),Object(a["d"])("li",{key:t.key},[e.isSelected(t)?(Object(a["r"])(),Object(a["d"])("div",oe,Object(a["C"])(t.title),1)):(Object(a["r"])(),Object(a["d"])(s,{key:1,to:"/devblog/".concat(t.key)},{default:Object(a["F"])((function(){return[Object(a["g"])(Object(a["C"])(t.title),1)]})),_:2},1032,["to"]))])})),128))])])}n("b0c0");var le=n("2909"),ce=n("5c40"),ue=Object(a["f"])('<p> Hey everyone. My name is Michael, welcome to my devblog where I will be writing about my game development experience over the past 5 years. At the time of writing this I am taking a break from gamedev to focus on other things, one of which is this blog. </p><h2 id="background">Background</h2><p> My friends and I formed an indie game studio called Overlook Studios during our third year of university and began working on 2D games in Unity. With a seemingly endless supply of motivation and creativity, we were driven by passion and the desire to learn how to make games. </p><p> Over the years, we worked on various projects ranging from an atmospheric survival horror game to a rhythm-based beat-em-up roguelike. </p><p>The team:</p><ul><li>Michael Bitzos - Lead programmer</li><li><a href="https://www.artstation.com/pixelgrim" target="_blank">Adam Mawby</a> - Artist </li><li>Ben Petkovsek - Designer/Programmer</li><li>Cole Bondarewski - Music/SFX</li></ul><p>Now you might be asking:</p><p><em>&quot;What games did you release?&quot;</em></p><p>And the answer is:</p><p><strong>None.</strong></p><p> Even though our projects weren&#39;t finished, there is still a thousand hours of hard work, a hundred thousand lines of code, and a large repository of knowledge that can be learned from. </p><h2 id="purpose">Purpose</h2><p> My goal is to share my experiences as the lead programmer for my team as well as how I incorporated my education and professional experience as a software engineer into designing the systems for the various core gameplay frameworks, features, and mechanics needed for our projects. </p><p> This blog is for anyone with a decent understanding of programming who is struggling to make games because of the challenges they face writing clean, maintainable, and scalable code. There will be an overarching focus on the technical skills of making 2D games in the Unity engine. </p><p> With any luck, you can learn from some of the lessons I&#39;ve learned so that your technical abilities are not the reason you can&#39;t complete your dream game. </p><h2 id="conclusion">Conclusion</h2><p> If you continue to read this blog, thank you for following me, hopefully reading about my challenges will help you overcome yours. </p><p> If you have any questions feel free to contact me: <a href="mailto:m.bitzos@gmail.com">m.bitzos@gmail.com</a></p>',18);function he(e,t,n,r,i,o){return Object(a["r"])(),Object(a["d"])("div",null,[ue])}var de={class:"post-image"};function me(e,t,r,i,o,s){return Object(a["r"])(),Object(a["d"])("div",de,[Object(a["h"])("img",{src:n("1771")("./".concat(e.image.uri)),style:e.image.style||{}},null,12,["src"]),e.image.subtitle?(Object(a["r"])(),Object(a["d"])("div",{key:0,class:"subtitle is-6",innerHTML:e.image.subtitle},null,8,["innerHTML"])):Object(a["e"])("",!0)])}var pe=Object(a["i"])({props:{image:{type:Object,required:!0}}});n("4dbd");pe.render=me;var fe=pe,be={class:"code-block",ref:"mySlot"};function ge(e,t,n,r,i,o){var s=Object(a["z"])("FontAwesomeIcon");return Object(a["r"])(),Object(a["d"])("div",be,[Object(a["h"])(s,{icon:"fa-regular fa-copy",class:"copy-icon",onClick:e.copy},null,8,["onClick"]),Object(a["y"])(e.$slots,"default")],512)}n("96cf");var ye=n("1da1"),ve=n("ad3d"),Oe=Object(a["i"])({components:{FontAwesomeIcon:ve["a"]},data:function(){return{code:""}},methods:{copy:function(){var e=this;return Object(ye["a"])(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){while(1)switch(t.prev=t.next){case 0:return t.next=2,navigator.clipboard.writeText(e.code);case 2:case"end":return t.stop()}}),t)})))()}},mounted:function(){this.code=this.$refs.mySlot.textContent}});n("cdf2");Oe.render=ge;var je=Oe,we=Object(a["i"])({components:{PostImageComponent:fe,CodeBlock:je}});we.render=he;var Se=we,ke=Object(a["m"])({title:"Introduction to my devblog",description:"Welcome to my blog where I will be writing tutorials and posts about my experiences creating games with my team as the main programmer.",tags:["misc"],date:new Date("2022-10-10T16:42:08.476Z"),component:Se,key:"introductions"}),xe=ke,Fe=Object(a["f"])('<p> One of the biggest mistakes beginner programmers make is defining classes and functions with too many responsibilities. For game developers this is often seen in the code that models your main playable entity in the game, ie the player controller. By managing too many responsibilities in a single place you are making it harder for yourself to grow, maintain, and debug your codebase. </p><p> With the accessibility of Unity&#39;s pre-built update loops (<code>Update</code>, <code>FixedUpdate</code>, <code>LateUpdate</code>) it is extremely easy to find yourself writing an unwieldy amount of code to control your player in a single class. With an unorganized mess of <code>if/elses</code>, edge cases, and a string of mechanics interspersed within one another, this becomes a nightmare in the present, and untenable in the future. </p><p> Online Unity tutorials and introductory materials tend to stress the use of the <code>Update</code> method for showcasing code. Placing large chunks of code here gives newcomers the impression that this is where the bulk of code should reside. These tutorials meant to show you snippets of prototype implementations fail to demonstrate the kind of infrastructure needed to work on long term projects with evolving requirements, nor should they. </p><p> This is one of difficulties I experienced when first getting into Unity and learning programming. The steps below breakdown how I am able to build a player controller beyond the prototype by utilizing finite state machines to cleanly manage my player states all while avoiding any of the mess of <code>if/else</code> or <code>switch</code> statements. </p><h2 id="finitestatemachines">Finite state machines</h2><p> A finite state machine (FSM) is a mathematical model described as a system that contains states, a reference to the current state, transitions connecting states together, and inputs/conditions that trigger the transition from one state to another. If you have any experience creating animations in Unity, Mecanim is a perfect example of what a state machine accomplishes. </p><p> A lot of game mechanics are implicitly designed as some form of a state machine since most things in a game are intrinsically stateful. They contain some model data that when some conditions are met will result in a change in its behaviour. </p>',7),Ce=Object(a["h"])("p",null," As you can see, it is very easy to design even the most basic mechanics as FSMs because it allows you to break down complex problems into understandable mental models. In the next section I will show how you can create an FSM framework that will help you build out your player controller. ",-1),Me=Object(a["h"])("h2",{id:"theimplementation"},"The implementation",-1),Ie=Object(a["h"])("p",null," The following are all essential classes you will need for your FSM framework: ",-1),Te=Object(a["h"])("h3",{id:"finitestatemachinecs"},"FiniteStateMachine.cs",-1),Ee=Object(a["h"])("pre",null,[Object(a["h"])("code",{class:"csharp language-csharp"},'/// <summary>\r\n/// Models a basic finite state machine\r\n/// Manages all the states in the FSM including transitions\r\n/// </summary>\r\npublic class FiniteStateMachine {\r\n\r\n  Dictionary<Type, State> states = new Dictionary<Type, State>();\r\n\r\n  public State currentState {\r\n    get;\r\n    private set;\r\n  }\r\n  State defaultState;\r\n\r\n  PlayerController player;\r\n\r\n  /// <summary>\r\n  /// Constructs a new finite state machine\r\n  /// </summary>\r\n  public FiniteStateMachine(PlayerController player) {\r\n    this.player = player;\r\n  }\r\n\r\n  /// <summary>\r\n  /// Initializes the FSM with the states \r\n  /// </summary>\r\n  protected void setStates(List<State> states, State defaultState) {\r\n    this.states.Clear();\r\n    foreach (var state in states) {\r\n      this.states.Add(state.GetType(), state);\r\n    }\r\n    this.defaultState = defaultState;\r\n  }\r\n\r\n  /// <summary>\r\n  /// Starts the FSM\r\n  /// </summary>\r\n  public void Start() {\r\n    this.ChangeState(defaultState);\r\n  }\r\n\r\n  /// <summary>\r\n  /// Triggers an update\r\n  /// </summary>\r\n  public void Update() {\r\n    if (currentState != null)\r\n      currentState.Update();\r\n  }\r\n\r\n  /// <summary>\r\n  /// triggers a fixed Update\r\n  /// </summary>\r\n  public void FixedUpdate() {\r\n    if (currentState != null)\r\n      currentState.FixedUpdate();\r\n  }\r\n\r\n  /// <summary>\r\n  /// Change to new state\r\n  /// </summary>\r\n  /// <typeparam name="S">The state to change to</typeparam>\r\n  public void ChangeState<S>() where S : State {\r\n    ChangeState(states[typeof(S)]);\r\n  }\r\n\r\n  /// <summary>\r\n  /// Change to new state\r\n  /// </summary>\r\n  /// <typeparam name="S">The state to change to</typeparam>\r\n  public void ChangeState(State state) {\r\n    if (currentState != null) {\r\n      currentState.OnExit();\r\n    }\r\n    currentState = state;\r\n    currentState.OnEnter();\r\n  }\r\n\r\n  /// <summary>\r\n  /// Changes to current state\r\n  /// </summary>\r\n  public void ChangeToDefault() {\r\n    ChangeState(defaultState);\r\n  }\r\n}\r\n')],-1),Pe=Object(a["h"])("p",null," This is the main orchestrator of the states and is to be the singular place we interface with the FSM framework. The FSM has basic functionality including the ability to provide the current state, set a default one, and of course change the current state. ",-1),Ae=Object(a["h"])("h3",{id:"statecs"},"State.cs",-1),Ue=Object(a["h"])("pre",null,[Object(a["h"])("code",{class:"csharp language-csharp"},"/// <summary>\r\n/// Models a state in a basic FSM\r\n/// </summary>\r\npublic abstract class State {\r\n  protected FiniteStateMachine fsm;\r\n  protected PlayerController player;\r\n\r\n  public State(FiniteStateMachine fsm, PlayerController player) {\r\n    this.player = player;\r\n    this.fsm = fsm;\r\n  }\r\n\r\n  /// <summary>\r\n  /// What to do on entering the state\r\n  /// </summary>\r\n  public abstract void OnEnter();\r\n\r\n  /// <summary>\r\n  /// What to do on exiting the state\r\n  /// </summary>\r\n  public abstract void OnExit();\r\n\r\n  public abstract void Update();\r\n  public abstract void FixedUpdate();\r\n\r\n  /// <summary>\r\n  /// Goes to a new state (Wrapper for ChangeState)\r\n  /// </summary>\r\n  public void Goto<S>() where S : State {\r\n    fsm.ChangeState<S>();\r\n  }\r\n\r\n  /// <summary>\r\n  /// Changes to default\r\n  /// </summary>\r\n  public void GoToDefault() {\r\n    fsm.ChangeToDefault();\r\n  }\r\n}\r\n")],-1),De=Object(a["f"])('<p> This is an abstract implementation of a single state in your FSM that allows you implement it&#39;s lifecycle hooks via inheritance. Along with the player it will also contain a reference to your FSM itself so that the states can easily request to change to another state. You&#39;ll notice that neither of these classes are extending from Unity&#39;s <code>MonoBehaviour</code> class, meaning they will not function as components you attach to your gameobjects. This will instead be used as a basic C# object that gets instantiated and has its lifecycle methods called via your <code>PlayerController</code>, below you can see an example of this. This method is simply a preference of mine as I quite enjoy the engine-agnostic aspect of this implementation. </p><p> I was interested in how this would look as a game object component so I went ahead and created one <a href="https://github.com/mbitzos/devblog-code-examples/tree/main/fsm-player-controllers/monobehaviour-example">here.</a> In retrospect I think this approach is better for Unity specifically since <code>GetComponent</code> removes a lot of the boilerplate and lets us utilize Unity&#39;s serialization for state class variables. For my next project I&#39;ll be sure to try out this out to see how the two differ! </p><p> The rest of the article is independent of this decision so don&#39;t fret if you decide to go with either implementation. </p><p> Another thing you&#39;ll notice is that my original definition of a FSM contains the concept of &quot;states&quot; and &quot;transitions&quot;. By comparison, my implementation doesn&#39;t explicitly define transitions as I believe them to be redundant for the use case of player state management. The focus of the FSM implementation is to decouple player state from the controller, the transitions are hardly the focus here and were less important for my use-case as well. This solution provides a great balance of strict separation of states with the freedom of transition control. </p><h2 id="example">Example</h2><p> Below is a barebones example of how I would implement a FSM for a player controller in an RPG. </p>',6),ze=Object(a["h"])("pre",null,[Object(a["h"])("code",{class:"csharp language-csharp"},"/// <summary>\r\n/// Models a basic fsm for a player\r\n/// </summary>\r\npublic class PlayerFSM : FiniteStateMachine {\r\n  public PlayerFSM(PlayerController player) : base(player) {\r\n    var defaultState = new DefaultState(this, player);\r\n    var states = new List<State>() {\r\n      defaultState,\r\n      new DashState(this, player),\r\n      new AttackState(this, player),\r\n      new DeathState(this, player),\r\n    };\r\n    setStates(states, defaultState);\r\n  }\r\n}\r\n\r\n/// <summary>\r\n/// Default state to control the player\r\n/// </summary>\r\npublic class DefaultState : State {\r\n  public DefaultState(FiniteStateMachine fsm, PlayerController player) : base(fsm, player) { }\r\n\r\n  public override void FixedUpdate() { }\r\n\r\n  public override void OnEnter() { }\r\n\r\n  public override void OnExit() { }\r\n\r\n  public override void Update() {\r\n    if (Input.GetKeyDown(KeyCode.Space)) {\r\n      Goto<DashState>();\r\n    }\r\n    // handle basic player movement physics + animation\r\n  }\r\n}\r\n\r\n/// <summary>\r\n/// Models when the player is performing an attack \r\n/// </summary>\r\npublic class AttackState : State {\r\n  public AttackState(FiniteStateMachine fsm, PlayerController player) : base(fsm, player) { }\r\n\r\n  public override void OnEnter() {\r\n    // Start attack animation\r\n  }\r\n\r\n  public override void OnExit() {\r\n    // End attack animation\r\n  }\r\n\r\n  public override void Update() { }\r\n\r\n  public override void FixedUpdate() {\r\n    // perform attack physics movement\r\n  }\r\n}\r\n\r\n/// <summary>\r\n/// Models the state when the player dashes\r\n/// </summary>\r\npublic class DashState : State {\r\n  public DashState(FiniteStateMachine fsm, PlayerController player) : base(fsm, player) { }\r\n\r\n  public override void OnEnter() {\r\n    // start dash animation\r\n    // start i-frames\r\n  }\r\n\r\n  public override void OnExit() {\r\n    // stop i-frames\r\n  }\r\n\r\n  public override void FixedUpdate() {\r\n    // perform dash physics\r\n  }\r\n  public override void Update() { }\r\n}\r\n\r\n/// <summary>\r\n/// Models the state when the player is dead \r\n/// </summary>\r\npublic class DeathState : State {\r\n  public DeathState(FiniteStateMachine fsm, PlayerController player) : base(fsm, player) { }\r\n\r\n  public override void OnEnter() {\r\n    // death animation\r\n    // game over\r\n    // stop inputs\r\n  }\r\n\r\n  public override void OnExit() { }\r\n\r\n  public override void Update() { }\r\n\r\n  public override void FixedUpdate() { }\r\n}\r\n")],-1),Le=Object(a["h"])("h2",{id:"beyond"},"Beyond",-1),We=Object(a["h"])("p",null," There is a ton we can do to further improve our FSM framework, it's up to you whether these features could help in your use-case but I recommend all of these for those that want to take their technical skills to the next level. ",-1),_e=Object(a["h"])("h3",{id:"utilizinggenerics"},"Utilizing Generics",-1),Be=Object(a["h"])("p",null,[Object(a["g"])(" The above design is strictly for our player controller, but what if we have other things in our game that want to utilize a FSM? One solution is that we could design a FSM that expects to pass in a "),Object(a["h"])("code",null,"MonoBehaviour"),Object(a["g"])(" object, but that would require us to cast it everywhere. ")],-1),qe=Object(a["h"])("pre",null,[Object(a["h"])("code",{class:"csharp language-csharp"},"public class ExampleState : State {\r\n  public ExampleState(FiniteStateMachine fsm, Monobehaviour stateObject) : base(fsm, stateObject) {}\r\n  public override void Update() {\r\n    PlayerController player = stateObject as PlayerController; // :'(\r\n    if (Input.GetKeyDown(KeyCode.Space)) {\r\n      player.DoSomethingSpecificToPlayer();\r\n    }\r\n  }\r\n}\r\n")],-1),He=Object(a["h"])("p",null,[Object(a["g"])(" This is where the beauty of C#'s generics comes in to help us design an object-agnostic FSM without the drawbacks mentioned above. If you are new to generics I would suggest to first "),Object(a["h"])("a",{href:"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/types/generics"},"read up on generics via the official C# documentation.")],-1),Ge=Object(a["h"])("p",null,[Object(a["g"])(" Essentially we change the definition of our FSM so that in our implementation of our states and FSM we can specify which type of "),Object(a["h"])("code",null,"MonoBehaviour"),Object(a["g"])(" we will be controlling. ")],-1),Re=Object(a["h"])("pre",null,[Object(a["h"])("code",{class:"csharp language-csharp"},'/// <summary>\r\n/// Models the finite state machine using generics\r\n/// </summary>\r\n/// <typeparam name="SO">[SO=State Object] This is the monobehaviour object that our FSM is controlling state for </typeparam>\r\npublic class FiniteStateMachine<SO> where SO : MonoBehaviour {\r\n\r\n  Dictionary<Type, State<SO>> states = new Dictionary<Type, State<SO>>();\r\n\r\n  public State<SO> currentState {\r\n    get;\r\n    private set;\r\n  }\r\n  State<SO> defaultState;\r\n\r\n  // This is the object that our FSM is controlling state for\r\n  private SO stateObject;\r\n\r\n  /// <summary>\r\n  /// Constructs a new finite state machine\r\n  /// </summary>\r\n  public FiniteStateMachine(SO stateObject) {\r\n    this.stateObject = stateObject;\r\n  }\r\n  ...\r\n}\r\n\r\n/// <summary>\r\n/// Models a state in an generic-powered FSM\r\n/// </summary>\r\n/// <typeparam name="SO">[SO=State Object] This is the object that our FSM is controlling state for </typeparam>\r\npublic abstract class State<SO> where SO : MonoBehaviour {\r\n  protected FiniteStateMachine<SO> fsm;\r\n  protected SO stateObject;\r\n\r\n  public State(FiniteStateMachine<SO> fsm, SO stateObject) {\r\n    this.stateObject = stateObject;\r\n    this.fsm = fsm;\r\n  }\r\n  ...\r\n}\r\n')],-1),Ne=Object(a["h"])("p",null," From there you can see how easy it is to use the same FSM framework for different controllers. ",-1),Ve=Object(a["h"])("pre",null,[Object(a["h"])("code",{class:"csharp language-csharp"},"// FSM for player controller\r\n#region Player\r\npublic class PlayerFSM : FiniteStateMachine<PlayerController> {\r\n  public PlayerFSM(PlayerController player) : base(player) {\r\n    // states\r\n  }\r\n}\r\npublic abstract class BasePlayerState : State<PlayerController> {\r\n  protected BasePlayerState(PlayerFSM fsm, PlayerController player) : base(fsm, player) { }\r\n}\r\npublic class DefaultState : BasePlayerState {\r\n  public DefaultState(PlayerFSM fsm, PlayerController player) : base(fsm, player) { }\r\n}\r\n\r\n#endregion\r\n\r\n// FSM for enemy controller\r\n#region Enemy\r\npublic class EnemyFSM : FiniteStateMachine<EnemyController> {\r\n  public EnemyFSM(EnemyController enemy) : base(enemy) {\r\n    // states\r\n  }\r\n}\r\npublic abstract class BaseEnemyState : State<EnemyController> {\r\n  protected BaseEnemyState(EnemyFSM fsm, EnemyController enemy) : base(fsm, enemy) { }\r\n}\r\npublic class DefaultState : BaseEnemyState {\r\n  public DefaultState(EnemyFSM fsm, EnemyController enemy) : base(fsm, enemy) { }\r\n}\r\n#endregion\r\n")],-1),Ke=Object(a["h"])("h3",{id:"onenterpayload"},"OnEnter Payload",-1),Je=Object(a["h"])("p",null," One thing our original implementation lacks is the ability for our states to retrieve data via transitions. An example could be if you designed a knockback state for your player upon receiving damage and needed the specific attack data to control the physics behaviour of the hit. ",-1),Ye=Object(a["h"])("p",null,[Object(a["g"])(' We can accomplish this easily by introducing a "payload" parameter in our '),Object(a["h"])("code",null,"ChangeState"),Object(a["g"])(" methods that then gets passed to the State's "),Object(a["h"])("code",null,"OnEnter"),Object(a["g"])(" method. Here I am defining the payload as "),Object(a["h"])("code",null,"object"),Object(a["g"])(" and building a helper function to cast it. You could instead use a "),Object(a["h"])("code",null,"Dictionary"),Object(a["g"])(" if you prefer json-style data. ")],-1),$e=Object(a["h"])("pre",null,[Object(a["h"])("code",{class:"csharp language-csharp"},"public class FiniteStateMachine {\r\n  ...\r\n  public void ChangeState(State state, object payload = null) {\r\n    if (currentState != null) {\r\n      currentState.OnExit();\r\n    }\r\n    currentState = state;\r\n    currentState.OnEnter(payload);\r\n  }\r\n  ...\r\n}\r\n\r\npublic abstract class State {\r\n  ...\r\n  // Helper func to fetch and get the payload\r\n  // will default if payload incorrectly is not found/casted\r\n  protected P CastPayload<P>(object payload, P defaultt = default(P)) {\r\n    try {\r\n      return (P) payload;\r\n    } catch {\r\n      return defaultt;\r\n    }\r\n  }\r\n  ...\r\n}\r\n")],-1),Ze=Object(a["h"])("p",null," One drawback of this is that loosely defined data structures is prone to regression bugs. As a solo developer I never ran into issues but in an expanding team of developers one can see how bugs could arise if the payload or the payload cast was changed independently of one another. Unit tests would catch this, but I know none of us are writing those. ",-1),Xe=Object(a["h"])("p",null," You could probably design a more robust payload system using generics but I have not attempted this yet since it was overkill for me. ",-1),Qe=Object(a["h"])("h3",{id:"statepriority"},"State priority",-1),et=Object(a["h"])("p",null,[Object(a["g"])(" A more niche thing I've done before is introduce the concept of state priority such that during "),Object(a["h"])("code",null,"ChangeState"),Object(a["g"])(" the FSM will only ever change the current state if the next state's priority is greater. This is useful if you have many transitions into a single state that can occur under the same conditions. Instead of writing behaviour outside the FSM to decide if the state should be changed, this can easily be done in the FSM framework. To be honest I personally found this was mostly unused in my projects. ")],-1),tt=Object(a["h"])("p",null,"Here is what the FSM and State would look like:",-1),nt=Object(a["h"])("pre",null,[Object(a["h"])("code",{class:"csharp language-csharp"},"public class FiniteStateMachine {\r\n  ...\r\n  // now returns if the state changed successfully\r\n  public bool ChangeState(State state) {\r\n    if (currentState != null && currentState.priority > state.priority)\r\n      return false;\r\n    if (currentState != null) {\r\n      currentState.OnExit();\r\n    }\r\n    currentState = state;\r\n    currentState.OnEnter();\r\n    return true;\r\n  }\r\n  ...\r\n}\r\n\r\npublic abstract class State {\r\n  ...\r\n  public int priority {\r\n    get;\r\n    private set;\r\n  }\r\n\r\n  public State(FiniteStateMachine fsm, PlayerController player, int priority = -1) {\r\n    this.player = player;\r\n    this.fsm = fsm;\r\n    this.priority = priority;\r\n  }\r\n  ...\r\n}\r\n")],-1),at=Object(a["f"])('<h3 id="transitionextras">Transition extras</h3><p> Right now the implementation leaves states in the dark regarding why an outside transition occurred. </p><p> One useful thing we can do is allow our states to capture two pieces of information: </p><ol><li><p>the next/previous state that is being changed to:</p><p> a. The next/previous state is useful for specific use cases, but I would say that if this is needed more often than not it would probably be a better idea to go with a FSM framework that requires strictly defined transitions. </p></li><li><p>if this current state was interrupted:</p><p> a. This can be very important because it lets a state define the difference between a graceful exit and a forceful one. It&#39;s ultimately better to design your states such that your <code>OnExit</code> cleans up the state regardless of how it&#39;s exited, but this solution offers a quick shortcut to solve applicable edgecases. </p></li></ol>',4),rt=Object(a["h"])("pre",null,[Object(a["h"])("code",{class:"csharp language-csharp"},'// Models a FSM that has some extra transition data\r\npublic class FiniteStateMachine {\r\n  ...\r\n  /// <summary>\r\n  /// Change to new state\r\n  /// </summary>\r\n  /// <param name="state"></param>\r\n  /// <param name="source">The state that called for this change, default is null if the signal came from outside the FSM</param>\r\n  /// <returns>if state change was successful</returns>\r\n  public bool ChangeState(State state, State source = null) {\r\n    if (currentState != null && currentState.priority > state.priority)\r\n      return false;\r\n    if (currentState != null) {\r\n      interrupt = currentState != source\r\n      currentState.OnExit(interrupt, state);\r\n    }\r\n    previousState = state;\r\n    currentState = state;\r\n    currentState.OnEnter(previousState);\r\n    return true;\r\n  }\r\n  ...\r\n}\r\n\r\n// Models a FSM state that has some extra transition data\r\npublic abstract class State {\r\n  ...\r\n  /// <summary>\r\n  /// What to do on entering the state\r\n  /// </summary>\r\n  public abstract void OnEnter(State previousState);\r\n\r\n  /// <summary>\r\n  /// What to do on exiting the state\r\n  /// </summary>\r\n  public abstract void OnExit(bool interrupted, State nextState);\r\n\r\n  /// <summary>\r\n  /// Goes to a new state (Wrapper for ChangeState)\r\n  /// </summary>\r\n  public void Goto<S>() where S : State {\r\n    fsm.ChangeState<S>(this); // results in an uninterrupted exit\r\n  }\r\n  ...\r\n}\r\n')],-1),it=Object(a["f"])('<h2 id="lessonslearned">Lessons learned</h2><ol><li><p> Writing poorly designed mechanically dense states in a FSM will simply offload your problems from the Update loop. The FSM is a tool but unlocking its potential is being able to effectively break down your controller into decoupled states. </p></li><li><p> Decide early where you want to store your player model. It may seem obvious to have all of your player functions and properties in their respective state classes. However if those same functions need to be accessible from other places you should consider moving them to your PlayerController. One core rule of this FSM implementation is to never directly call functions and data in your state classes. If you do this you&#39;ll quickly understand that it&#39;s messy and is considered a failure in state design. </p></li><li><p> Don&#39;t be afraid to use your engine&#39;s tools, they&#39;re there to help you make games faster and easier. I personally learned while writing this article how the <code>MonoBehaviour</code> approach to my FSM implementation is superior as it provides more functionality with less boilerplate code. </p></li></ol><h2 id="conclusion">Conclusion</h2><p> It is entirely possible to make a game with a single script for your player controller and it is not the determining factor for your games completion or success. Celeste is an example of a successful title <a href="https://github.com/NoelFB/Celeste/blob/master/Source/Player/Player.cs">that has a single 5400 lined player controller script,</a> but I have no doubt there were great difficulties revolving around this. While it is not the only or last example of this, every step we can make as developers to improve our technical skills will result in fewer times we are limited in creating the dream game we all desire to make. Using FSMs is but just one example of doing so by designing a robust player controller that allows you to develop easily understandable yet complex mechanics for your player while maintaining the integrity of your ever-expanding code. </p><p> All of the code examples in this article can be found <a href="https://github.com/mbitzos/devblog-code-examples/tree/main/fsm-player-controllers">here on my GitHub.</a></p>',5);function ot(e,t,n,r,i,o){var s=Object(a["z"])("PostImageComponent"),l=Object(a["z"])("CodeBlock");return Object(a["r"])(),Object(a["d"])("div",null,[Fe,Object(a["h"])("p",null,[Object(a["h"])(s,{class:"post-image",image:{uri:"posts/fsm-player-controllers/fsm-locked-door.jpg",subtitle:"A locked door in a game modelled as a basic FSM"}},null,8,["image"])]),Object(a["h"])("p",null,[Object(a["h"])(s,{class:"post-image",image:{uri:"posts/fsm-player-controllers/fsm-quest.jpg",subtitle:"A questline in an RPG modelled as a basic FSM"}},null,8,["image"])]),Ce,Me,Ie,Te,Object(a["h"])(l,null,{default:Object(a["F"])((function(){return[Ee]})),_:1}),Pe,Ae,Object(a["h"])(l,null,{default:Object(a["F"])((function(){return[Ue]})),_:1}),De,Object(a["h"])(l,null,{default:Object(a["F"])((function(){return[ze]})),_:1}),Le,We,_e,Be,Object(a["h"])(l,null,{default:Object(a["F"])((function(){return[qe]})),_:1}),He,Ge,Object(a["h"])(l,null,{default:Object(a["F"])((function(){return[Re]})),_:1}),Ne,Object(a["h"])(l,null,{default:Object(a["F"])((function(){return[Ve]})),_:1}),Ke,Je,Ye,Object(a["h"])(l,null,{default:Object(a["F"])((function(){return[$e]})),_:1}),Ze,Xe,Qe,et,tt,Object(a["h"])(l,null,{default:Object(a["F"])((function(){return[nt]})),_:1}),at,Object(a["h"])(l,null,{default:Object(a["F"])((function(){return[rt]})),_:1}),it])}var st=Object(a["i"])({components:{PostImageComponent:fe,CodeBlock:je}});st.render=ot;var lt=st,ct=Object(a["m"])({title:"Using finite state machines to build scalable player controllers",description:"Explaining how I use the finite state machine design model to write my player controllers to easily add features without sacrificing code quality.",tags:["code","c#","unity"],mainImage:{uri:"posts/fsm-player-controllers/cover.jpg",subtitle:"A very basic state machine for a platformer player controller"},date:new Date("2022-11-15T04:30:45.378Z"),component:lt,key:"fsm-player-controllers"}),ut=ct,ht=Object(a["f"])('<p> Over the years, I have grown to appreciate and love the art of writing code to solve problems. It feels more natural to me to approach things programmatically. While I love everything Unity’s editor tools offer, nothing will ever beat the satisfaction of building games within an IDE. When it comes to creating visually dependent mechanics and experiences in my games, I build dynamic code-driven solutions that allow me to have the level of control I need for rapid development. </p><p> In a more utilitarian definition, an animation is a sequence of explicitly defined states (frames) of an entity and its properties against a timescale. Controlling the ultra-precise dash movement in a 2D metroidvania, handcrafting the timing of shader and particle effects triggered during an ultimate attack, or having the flickering lights in a dark room build the ambience in your horror game- all of these examples can be interpreted as forms of dynamic animation. </p><p> After a few years of building 2D games, I&#39;ve learned to write dynamic animated events that can interface with surrounding systems. This not only results in the creation of more complex gameplay features, but saves time that would otherwise be more beneficial in other areas of the game. In my attempts to accomplish this within the Unity Animator I discovered a limitation: time. Building many variations of the same animation with transitions/blendtrees connecting them can give the illusion to the player that it is dynamic. Although, this isn’t always feasible or practical, as well as there being a fundamental limitation relying on statically defined animations. In this article I will go over how I instead use the power of coroutines to write programmatic animations so you can create these gameplay mechanics easily and ultimately with more control. </p><p><em>NOTE: When I refer to animations in the scope of this article I am <strong>not</strong> referring to sprite animations. The Animator is how I accomplish this as it works best for me, but I do eventually want to explore solutions that move away from that. With that being said, I have heard of <a href="https://kybernetik.com.au/animancer/" target="_blank">Animancer by Kybernetik</a> that is an asset for Unity to replace the animator using a code-driven approach. While I have not personally used it extensively I think the idea of it is very powerful and worth checking out.</em></p><h3 id="thecoroutine">The Coroutine</h3><p> Without diving into the technical know-how of what a coroutine is, as a developer all you care about is that a coroutine lets you easily write code that seemingly runs in its own update loop. Despite what that may imply it is NOT a multi-threaded or multi-processed operation as it still runs on the main thread, it will not offer any of the benefits of parallelism. The true power of the coroutines comes from its intuitive developer experience when writing time-dependent code. If you have ever attempted to write even the most basic logic involving time in an Update loop, you’ll know it’s a nightmare. By comparison, coroutines allow you to accomplish the same in just a few lines of readable code. </p><p> Once you&#39;ve mastered the power of the <code>yield</code> statement in coroutines, there’s no limit to what you can create. </p><ul><li><code>yield return null</code> -&gt; Waits a single update frame.</li><li><code>yield return new WaitForFixedUpdate()</code> -&gt; Waits for the fixed update frame, should be used for situations involving physics. </li><li><code>yield return new WaitForEndOfFrame()</code> -&gt; Similar to <code>LateUpdate</code> but for coroutines, useful for when you need to wait for rendering and physics to be completed. </li><li><code>yield return new WaitForSeconds()/WaitForSecondsRealtime()</code> -&gt; Halts the coroutine for a period of time, for our use case this allows us to add timed pauses similar to spacing out frames in an animation. </li><li><code>yield return new WaitUntil()/WaitWhile()</code> -&gt; Not something I&#39;ve ever used for animations, I can see this being more useful for other applications. </li></ul><p> These are nice and all but one thing that can&#39;t easily be done is controlling how a property changes from one value to the another over a period of time- a fundamental concept in animation. </p><h3 id="lerp">Lerp</h3><p> Lerping is the process of following a linear interpolation between two data points where given a value <code>a</code>, <code>b</code>, and <code>t</code> will return you <code>a + (b-a) * t</code>. If that doesn&#39;t really make sense I don&#39;t blame you. As a game developer I imagine lerps as a straight line that can be traversed from one end to another, and the <code>t</code> parameter representing the percentage &quot;progress&quot; along that line within the range [0,1]. <code>t=0</code> is the start of the line, <code>t=0.5</code> is in the middle, and <code>t=1</code> is the end. </p><p> Lerping gives us the power to control how a property can move from one value to another, and when mapped over a period of time represents the animated transition of that property. To actually utilise lerping inside coroutines I wrote this very simple util that given a duration, controls the timing needed for lerps on a per-frame basis. </p>',12),dt=Object(a["h"])("pre",null,[Object(a["h"])("code",{class:"csharp language-csharp"},'public static class CoroutineUtils {\r\n\r\n  /// <summary>\r\n  /// provides a util to easily control the timing of a lerp over a duration\r\n  /// </summary>\r\n  /// <param name="duration">How long our lerp will take</param>\r\n  /// <param name="action">The action to perform per frame of the lerp, is given the progress t in [0,1]</param>\r\n  public static IEnumerator Lerp(float duration, Action<float> action) {\r\n    float time = 0;\r\n    while (time < duration) {\r\n      float delta = Time.deltaTime;\r\n      float t = (time + delta > duration) ? 1 : (time / duration);\r\n      action(t);\r\n      time += delta;\r\n      yield return null;\r\n    }\r\n    // handle the last frame\r\n    action(1);\r\n  }\r\n}\r\n')],-1),mt=Object(a["h"])("p",null,[Object(a["h"])("em",null,"NOTE: The name of the util is a bit misleading since it doesn't actually perform the lerp, given that it's always used with one I figured it's a fitting name.")],-1),pt=Object(a["h"])("p",null,"The util can than be easily used as shown in this simple example:",-1),ft=Object(a["h"])("pre",null,[Object(a["h"])("code",{class:"csharp language-csharp"},"private IEnumerator animation() {\r\n  const float InitialDelay = 5;\r\n  const float EndDelay = 5;\r\n  const float TransitionTime = 5;\r\n  Color StartColor = Color.white;\r\n  Color EndColor = Color.red;\r\n  yield return new WaitForSeconds(InitialDelay);\r\n\r\n  // Lerp the renderer's color from white -> red -> white\r\n  yield return CoroutineUtil.Lerp(TransitionTime / 2, t => {\r\n    this.renderer.color = Color.Lerp(StartColor, EndColor, t);\r\n  });\r\n  yield return CoroutineUtil.Lerp(TransitionTime / 2, t => {\r\n    this.renderer.color = Color.Lerp(EndColor, StartColor, t);\r\n  });\r\n\r\n  yield return new WaitForSeconds(EndDelay);\r\n}\r\n")],-1),bt=Object(a["f"])('<p> The power of this util is that you are not tied to what you want to animate or how. You can use whatever lerping method you want since the function primarily controls the timing for your lerps. Whether you need to animate numbers (<code>Mathf.Lerp</code>), transform positions (<code>Vector2.Lerp</code>), or colors (<code>Color.Lerp</code>), there are plenty of methods you can use with the util to create dynamically animated events in your game. If you&#39;re adventurous you could use an entirely different interpolation method, although in later sections you&#39;ll see there might not be a need to do that at all. </p><p> This is a good start but the limitation with lerping is that it is a <strong>linear</strong> interpolation. For animations this means it will only animate properties in a linear time-scale. Those with any animation experience understand that linear movement is not the only way to transition properties, nor is it always the desired one. </p><p> This util is brought to the next level when we utilise the <code>AnimationCurve</code> class in our <code>Lerp</code> util to allow us to control the time curve with hand-placed precision. </p><h3 id="animationcurve">AnimationCurve</h3><p><code>AnimationCurve</code> is one of the core classes that powers the animation system in Unity, it is used in animation clips to provide a function of a property&#39;s value over time. </p><p> The main usage of this class that we need is its <code>Evaluate</code> method which gives us the value of a point on the curve at a given time. The curve is modelled as a mathematical function over an x/y axis, a reminder to those that <code>f(x)=mx+b</code> is still a thing after highschool. Normally this is used to control a property of an animation&#39;s target object over time, but for our case we will use it to control the <code>t</code> parameter of our lerps. This essentially allows us to have non-linear interpolation and to unlock the true potential of building various kinds of animations using coroutines. </p>',6),gt=Object(a["h"])("p",null,[Object(a["g"])(" This integration with our "),Object(a["h"])("code",null,"Lerp"),Object(a["g"])(" util can be implemented as the following: ")],-1),yt=Object(a["h"])("pre",null,[Object(a["h"])("code",{class:"csharp language-csharp"},'/// <summary>\r\n/// provides a util to easily control the timing of a lerp over a duration\r\n/// </summary>\r\n  /// <param name="duration">How long our lerp will take</param>\r\n  /// <param name="action">The action to perform per frame of the lerp, is given the progress t in [0,1]</param>\r\n/// <param name="curve">If we want out time curve to follow a specific animation curve</param>\r\n/// <returns></returns>\r\npublic static IEnumerator Lerp(float duration, Action<float> action, AnimationCurve curve = null) {\r\n  float time = 0;\r\n\r\n  // by default we use a linear evaluation\r\n  Func<float, float> tEval = t => t;\r\n\r\n  // If a curve is provided follow the curve for our t evaluations instead\r\n  if (curve != null) tEval = t => curve.Evaluate(t);\r\n  while (time < duration) {\r\n    float delta = Time.deltaTime;\r\n    float t = (time + delta > duration) ? 1 : (time / duration);\r\n    action(tEval(t));\r\n    time += delta;\r\n    yield return null;\r\n  }\r\n  action(tEval(1));\r\n}\r\n')],-1),vt=Object(a["h"])("p",null," One caveat is that for all of our animation curves we use we should always ensure it is normalised between [0,1] in the x-axis since our lerp will only ever be evaluated in that range. Whether this is enforced in code or good practices in the editor- the idea is the same. ",-1),Ot=Object(a["h"])("h3",{id:"someextras"},"Some extras",-1),jt=Object(a["h"])("p",null,[Object(a["g"])(" The following is the util as it stands in my current codebase with all of its extra features, code can be found "),Object(a["h"])("a",{href:"https://github.com/mbitzos/devblog-code-examples/tree/main/programmatic-animation-using-coroutines"},"here on my GitHub.")],-1),wt=Object(a["h"])("pre",null,[Object(a["h"])("code",{class:"csharp language-csharp"},'/// <summary>\r\n/// provides a util to easily control the timing of a lerp over a duration\r\n/// </summary>\r\n/// <param name="duration">How long our lerp will take</param>\r\n/// <param name="action">The action to perform per frame of the lerp, is given the progress t in [0,1]</param>\r\n/// <param name="realTime">If we want to run our lerp on real time</param>\r\n/// <param name="smooth">If we want our time curve to run on a smooth step</param>\r\n/// <param name="curve">If we want our time curve to follow a specific animation curve</param>\r\n/// <param name="inverse">If we want the time to be inversed such that it returns t-1</param>\r\n/// <returns></returns>\r\npublic static IEnumerator Lerp(\r\n  float duration,\r\n  Action<float> action,\r\n  bool realTime = false,\r\n  bool smooth = false,\r\n  AnimationCurve curve = null,\r\n  bool inverse = false\r\n) {\r\n  float time = 0;\r\n  Func<float, float> tEval = t => t;\r\n  if (smooth) tEval = t => Mathf.SmoothStep(0, 1, t);\r\n  if (curve != null) tEval = t => curve.Evaluate(t);\r\n  while (time < duration) {\r\n    float delta = realTime ? Time.fixedDeltaTime : Time.deltaTime;\r\n    float t = (time + delta > duration) ? 1 : (time / duration);\r\n    if (inverse)\r\n      t = 1 - t;\r\n    action(tEval(t));\r\n    time += delta;\r\n    yield return null;\r\n  }\r\n  action(tEval(inverse ? 0 : 1));\r\n}\r\n')],-1),St=Object(a["h"])("h2",{id:"puttingitalltogether"},"Putting it all together",-1),kt=Object(a["h"])("p",null,[Object(a["g"])(" With "),Object(a["h"])("code",null,"Lerp"),Object(a["g"])(" and "),Object(a["h"])("code",null,"WaitForSeconds"),Object(a["g"])(" you will be able to make just about any form of dynamic animation in a coroutine that is easily controllable with code. ")],-1),xt=Object(a["h"])("p",null," Here is some examples of how I've used coroutines to control animated events in my games: ",-1),Ft=Object(a["h"])("pre",null,[Object(a["h"])("code",{class:"csharp language-csharp"},"// Card fade animation\r\nyield return CoroutineUtil.Lerp(FadeTime, t => {\r\n  Color c = FrameSprite.color;\r\n  c.a = Mathf.Lerp(initial, 1f, t);\r\n  FrameSprite.color = c;\r\n});\r\n---\r\n// Card hover/unhover animation\r\nyield return CoroutineUtil.Lerp(HoverTime, t => {\r\n  cardTransform.localPosition = Vector2.Lerp(originalPosition, target, t);\r\n}, smooth : true);\r\n---\r\n// Deck organizer animation\r\nyield return CoroutineUtil.Lerp(TransitionTime, t => {\r\n\r\n  // set positions\r\n  for (int i = 0; i < size; i++) {\r\n    Vector2 pos = Vector2.Lerp(originalPositions[i], newPositions[i], t);\r\n    cards[i].transform.position = new Vector3(pos.x, pos.y, cards[i].transform.position.z);\r\n  }\r\n}, smooth : true);\r\n")],-1),Ct=Object(a["h"])("pre",null,[Object(a["h"])("code",{class:"csharp language-csharp"},"// Jump/attack movement animation\r\nyield return CoroutineUtil.Lerp(timeUntilNextBeat, t => {\r\n  end.x += xMovement;\r\n  end.y += yMovement;\r\n  stateObject.SetPosition(Vector2.Lerp(start, end, t));\r\n  Vector2 dropshadowSize = dropShadowLocalScale.Copy();\r\n  float size = stateObject.HeavyAttackDropShadowAnim.Evaluate(t).RoundTo(0.1f);\r\n  dropshadowSize += size * Vector2.one;\r\n  stateObject.dropShadow.transform.localScale = dropshadowSize;\r\n}, curve : stateObject.HeavyAttackJumpCurve);\r\n---\r\n// Dash Animation\r\nyield return CoroutineUtil.Lerp(stateObject.DashTime, t => {\r\n  stateObject.SetPosition(Vector2.Lerp(initial, target, t));\r\n}, curve : stateObject.DashCurve);\r\n---\r\n// Dash ghost effect\r\nSprite ghostSprite = stateObject.CharacterRenderer.sprite;\r\nwhile (ghosts < stateObject.DashGhosts) {\r\n  ghosts++;\r\n  spawnGhost(ghostSprite);\r\n  yield return wait;\r\n}\r\n")],-1),Mt=Object(a["h"])("pre",null,[Object(a["h"])("code",{class:"csharp language-csharp"},"// the idle animator of the lights\r\nIEnumerator idleAnimation() {\r\n  while (true) {\r\n\r\n    // randomly wait\r\n    float wait = UnityEngine.Random.Range(MinWait, MaxWait);\r\n\r\n    if (StartingState)\r\n      switch (lightFlickerMode) {\r\n        case LightFlickerMode.Soft:\r\n          yield return StartCoroutine(softFlicker(Mathf.Infinity)); // enter infinite loop for soft flicker\r\n          break;\r\n        case LightFlickerMode.Hard: // just wait\r\n          yield return new WaitForSeconds(wait);\r\n          break;\r\n        case LightFlickerMode.All:\r\n          yield return StartCoroutine(softFlicker(wait)); // enter waiting period with soft flicker\r\n          break;\r\n      }\r\n    else\r\n      yield return new WaitForSeconds(wait);\r\n\r\n    // randomly flicker\r\n    int flickerAmount = UnityEngine.Random.Range(MinFlicker, MaxFlicker + 1);\r\n    yield return StartCoroutine(flickerAnimation(flickerAmount));\r\n  }\r\n}\r\n\r\n// the rapid flickering of the light animation\r\nIEnumerator flickerAnimation(int flickerCount) {\r\n  while (flickerCount > 0) {\r\n    toggleLight(!state);\r\n    yield return new WaitForSeconds(FlickerRate);\r\n    toggleLight(!state);\r\n    yield return new WaitForSeconds(FlickerRate);\r\n    flickerCount--;\r\n  }\r\n}\r\n\r\n// animates a rapid soft flicker on idle\r\nIEnumerator softFlicker(float idleTime) {\r\n  float originalIntensity = intensity;\r\n  float nextIntensity = originalIntensity * SoftFlickerModifer;\r\n\r\n  while (idleTime > 0) {\r\n    intensity = nextIntensity;\r\n    yield return softFlickerWait;\r\n    intensity = originalIntensity;\r\n    yield return softFlickerWait;\r\n    idleTime -= SoftFlickerRate * 2;\r\n  }\r\n}\r\n")],-1),It=Object(a["h"])("p",null," Simply having the ability to edit public/serializable variables for my animations during run-time makes development fast and satisfying. As I play my game I can immediately see the impact the changes my variables make to my animations. This is especially useful when you are in the polishing stages of a feature and need to find that magic number. ",-1),Tt=Object(a["h"])("h2",{id:"conclusion"},"Conclusion",-1),Et=Object(a["h"])("p",null," Coroutines are a very powerful tool that allow you to quickly create dynamic animations with none of the compromise. If you’ve ever felt the time sink of creating animated events using the Unity Animator, I hope that this article will help you see things from a programmatic perspective and unshackle yourself from the limitations of statically defined animations. ",-1),Pt=Object(a["h"])("p",null,[Object(a["g"])(" All of the code examples can be found "),Object(a["h"])("a",{href:"https://github.com/mbitzos/devblog-code-examples/tree/main/programmatic-animation-using-coroutines",target:"_blank"},"here on my GitHub.")],-1),At=Object(a["h"])("p",null,[Object(a["g"])(" All of the pixel art shown was created by our artist for various games we've worked on, "),Object(a["h"])("a",{href:"https://www.artstation.com/pixelgrim",target:"_blank"},"check out his artstation"),Object(a["g"])(". ")],-1);function Ut(e,t,n,r,i,o){var s=Object(a["z"])("CodeBlock"),l=Object(a["z"])("PostImageComponent");return Object(a["r"])(),Object(a["d"])("div",null,[ht,Object(a["h"])(s,null,{default:Object(a["F"])((function(){return[dt]})),_:1}),mt,pt,Object(a["h"])(s,null,{default:Object(a["F"])((function(){return[ft]})),_:1}),Object(a["h"])("p",null,[Object(a["h"])(l,{class:"post-image",image:{uri:"posts/programmatic-animation-using-coroutines/color-lerp-example.gif"}},null,8,["image"])]),bt,Object(a["h"])("p",null,[Object(a["h"])(l,{class:"post-image",image:{uri:"posts/programmatic-animation-using-coroutines/animation-curve-editor.jpg",subtitle:"With a built-in property editor for our <code>AnimationCurve's</code> serialized/public variables, polishing our animations timing is easy and intuitive. As an added bonus if you add <a href='https://forum.unity.com/threads/copy-and-paste-curves.162557/#post-1277055'>this editor script</a> to an <code>/Editor</code> folder you can enable copy/pasting of curves."}},null,8,["image"])]),gt,Object(a["h"])(s,null,{default:Object(a["F"])((function(){return[yt]})),_:1}),vt,Object(a["h"])("p",null,[Object(a["h"])(l,{class:"post-image",image:{uri:"posts/programmatic-animation-using-coroutines/animation-curves.gif",subtitle:"Showing how different animation curves affect the look and feel of the same translation. Small changes like this can help you polish the presentation and quality of your gameplay."}},null,8,["image"])]),Ot,jt,Object(a["h"])(s,null,{default:Object(a["F"])((function(){return[wt]})),_:1}),St,kt,xt,Object(a["h"])("p",null,[Object(a["h"])(l,{class:"post-image",image:{uri:"posts/programmatic-animation-using-coroutines/card-deck-animation.gif",subtitle:"Controlling how the cards fit together in a players deck for a carding building prototype. Having this built with code allowed me to easily create a card deck that was constantly changing in size."}},null,8,["image"])]),Object(a["h"])(s,null,{default:Object(a["F"])((function(){return[Ft]})),_:1}),Object(a["h"])("p",null,[Object(a["h"])(l,{class:"post-image",image:{uri:"posts/programmatic-animation-using-coroutines/attack-dash-animations.gif",subtitle:"Polishing the exact distance and timing of a players strong attack lunge and dash for a snappy beat-em-up experience. Since this lunge could be enhanced by item stats, having the parameters of the animation driven by variables in the code made it easy to test and adjust."}},null,8,["image"])]),Object(a["h"])(s,null,{default:Object(a["F"])((function(){return[Ct]})),_:1}),Object(a["h"])("p",null,[Object(a["h"])(l,{class:"post-image",image:{uri:"posts/programmatic-animation-using-coroutines/ambient-lighting-animations.gif",subtitle:"Building a system of ambient lighting in our horror game using coroutine animations allowed us to have in-game events dynamically influence the atmosphere around the player."}},null,8,["image"])]),Object(a["h"])(s,null,{default:Object(a["F"])((function(){return[Mt]})),_:1}),It,Tt,Et,Pt,At])}var Dt=Object(a["i"])({components:{PostImageComponent:fe,CodeBlock:je}});Dt.render=Ut;var zt=Dt,Lt=Object(a["m"])({title:"Creating dynamic animations programmatically with Unity coroutines",description:"How using coroutines in Unity allows you to create dynamic animations purely with code to build complex features quickly and easily.",tags:["code","c#","unity"],mainImage:{uri:"posts/programmatic-animation-using-coroutines/cover.png"},date:new Date("2022-12-11T02:22:18.484Z"),component:zt,key:"programmatic-animation-using-coroutines"}),Wt=Lt,_t=[xe,ut,Wt],Bt=_t,qt=Object(le["a"])(Bt);qt.reverse();var Ht=Object(ce["l"])({data:function(){return{articles:qt}},methods:{isSelected:function(e){return e.key==this.$route.name}}});n("a851");Ht.render=se;var Gt=Ht,Rt=Object(a["i"])({components:{sidebar:Gt,FontAwesomeIcon:ve["a"]},data:function(){return{open:!1}},methods:{toggleOpen:function(){this.open=!this.open}}});n("7c5f");Rt.render=ne;var Nt=Rt,Vt={class:"post"},Kt={class:"title is-2"},Jt={class:"datestamp"},Yt=Object(a["g"])(" - "),$t={class:"taggs"},Zt=Object(a["h"])("div",{class:"main-divider"},null,-1);function Xt(e,t,n,r,i,o){var s,l=Object(a["z"])("PostImageComponent");return Object(a["r"])(),Object(a["d"])("div",Vt,[Object(a["h"])("div",Kt,Object(a["C"])(e.post.title),1),Object(a["h"])("div",null,[Object(a["h"])("span",Jt,Object(a["C"])(null===(s=e.post.date)||void 0===s?void 0:s.toLocaleDateString("en-US",{year:"numeric",month:"long",day:"numeric"})),1),Yt,Object(a["h"])("span",$t,[(Object(a["r"])(!0),Object(a["d"])(a["a"],null,Object(a["x"])(e.post.tags,(function(e){return Object(a["r"])(),Object(a["d"])("span",{class:"tagg",key:e}," ["+Object(a["C"])(e)+"] ",1)})),128))])]),e.post.mainImage?(Object(a["r"])(),Object(a["d"])(l,{key:0,class:"main-image",image:e.post.mainImage},null,8,["image"])):Object(a["e"])("",!0),Zt,(Object(a["r"])(),Object(a["d"])(Object(a["A"])(e.post.component),{class:"main-content"}))])}var Qt=n("1487"),en=n.n(Qt),tn=Object(a["i"])({components:{PostImageComponent:fe},props:{post:{type:Object,required:!0}},mounted:function(){en.a.highlightAll()}});n("b8ff");tn.render=Xt;var nn=tn,an=Bt.map((function(e){return{path:e.key,name:e.key,component:nn,props:{post:e}}})),rn=an[0].path,on=[{path:"/",name:"home",component:_},{path:"/devblog",name:"devblog",redirect:"/devblog/".concat(rn),component:Nt,children:an},{path:"/:pathMatch(.*)",name:"redirect",redirect:{name:"home"}}],sn=Object(s["a"])({history:Object(s["b"])(),routes:on}),ln=sn,cn=n("be33"),un=n("11ca"),hn=n("2753");n("b383"),cn["c"].add(un["a"],hn["a"]),Object(a["c"])(o).use(ln).component("font-awesome-icon",ve["a"]).mount("#app")},cdf2:function(e,t,n){"use strict";n("5b33")},d0122:function(e,t,n){e.exports=n.p+"fonts/AkagiPro-Black.91adf9b7.ttf"},d6a1:function(e,t,n){e.exports=n.p+"img/fsm-quest.fc3e4030.jpg"},dc6b:function(e,t,n){},e06c:function(e,t,n){e.exports=n.p+"img/fsm-locked-door.8a24fb8f.jpg"},e3b1:function(e,t,n){},ef7d:function(e,t,n){e.exports=n.p+"img/cover.821cfbe3.jpg"},f22a:function(e,t,n){},fc91:function(e,t,n){e.exports=n.p+"img/animation-curves.2df75a7d.gif"},fc94:function(e,t,n){"use strict";n("8ae2")}});
//# sourceMappingURL=app.5c25ef1d.js.map